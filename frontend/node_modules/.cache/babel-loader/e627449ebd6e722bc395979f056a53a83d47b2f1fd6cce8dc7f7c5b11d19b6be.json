{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u0410\\u043D\\u0430\\u0441\\u0442\\u0430\\u0441\\u0438\\u044F\\\\test-app\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { useAuth } from './auth-context'; // Adjust import path as needed\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [trees, setTrees] = useState([]); // State for storing trees\n  const [name, setName] = useState(''); // State for search name\n  const {\n    user\n  } = useAuth(); // Get user from auth context\n\n  useEffect(() => {\n    if (name) {\n      const fetchData = async () => {\n        try {\n          const token = await (user === null || user === void 0 ? void 0 : user.getIdToken());\n          const response = await fetch('http://localhost:5000/api/trees/search', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              ...(token && {\n                'Authorization': `Bearer ${token}`\n              })\n            },\n            body: JSON.stringify({\n              name\n            })\n          });\n          if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n          }\n          const data = await response.json();\n          setTrees(data.results || []); // Update state with results\n        } catch (error) {\n          console.error('Error fetching data:', error);\n          setTrees([]); // Clear trees on error\n        }\n      };\n      fetchData();\n    } else {\n      setTrees([]); // Clear trees when no name\n    }\n  }, [name, user]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: trees.map(tree => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: tree.name\n    }, tree.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Vv+Tp6TQ+xzKybIV1jGzoDmk85I=\", false, function () {\n  return [useAuth];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","useAuth","jsxDEV","_jsxDEV","App","_s","trees","setTrees","name","setName","user","fetchData","token","getIdToken","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","data","json","results","error","console","children","map","tree","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Анастасия/test-app/frontend/src/App.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useAuth } from './auth-context'; // Adjust import path as needed\n\nfunction App() {\n  const [trees, setTrees] = useState([]); // State for storing trees\n  const [name, setName] = useState('');   // State for search name\n  const { user } = useAuth();             // Get user from auth context\n\n  useEffect(() => {\n    if (name) {\n      const fetchData = async () => {\n        try {\n          const token = await user?.getIdToken();\n          const response = await fetch('http://localhost:5000/api/trees/search', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              ...(token && { 'Authorization': `Bearer ${token}` })\n            },\n            body: JSON.stringify({ name })\n          });\n\n          if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n          }\n\n          const data = await response.json();\n          setTrees(data.results || []); // Update state with results\n        } catch (error) {\n          console.error('Error fetching data:', error);\n          setTrees([]); // Clear trees on error\n        }\n      };\n      fetchData();\n    } else {\n      setTrees([]); // Clear trees when no name\n    }\n  }, [name, user]);\n\n  return (\n    <div>\n      {/* Your component JSX */}\n      {trees.map(tree => (\n        <div key={tree.id}>{tree.name}</div>\n      ))}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,OAAO,QAAQ,gBAAgB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE1C,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACxC,MAAM,CAACS,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAG;EACxC,MAAM;IAAEW;EAAK,CAAC,GAAGT,OAAO,CAAC,CAAC,CAAC,CAAa;;EAExCD,SAAS,CAAC,MAAM;IACd,IAAIQ,IAAI,EAAE;MACR,MAAMG,SAAS,GAAG,MAAAA,CAAA,KAAY;QAC5B,IAAI;UACF,MAAMC,KAAK,GAAG,OAAMF,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEG,UAAU,CAAC,CAAC;UACtC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,wCAAwC,EAAE;YACrEC,MAAM,EAAE,MAAM;YACdC,OAAO,EAAE;cACP,cAAc,EAAE,kBAAkB;cAClC,IAAIL,KAAK,IAAI;gBAAE,eAAe,EAAE,UAAUA,KAAK;cAAG,CAAC;YACrD,CAAC;YACDM,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;cAAEZ;YAAK,CAAC;UAC/B,CAAC,CAAC;UAEF,IAAI,CAACM,QAAQ,CAACO,EAAE,EAAE;YAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBR,QAAQ,CAACS,MAAM,EAAE,CAAC;UAC3D;UAEA,MAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;UAClClB,QAAQ,CAACiB,IAAI,CAACE,OAAO,IAAI,EAAE,CAAC,CAAC,CAAC;QAChC,CAAC,CAAC,OAAOC,KAAK,EAAE;UACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;UAC5CpB,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;QAChB;MACF,CAAC;MACDI,SAAS,CAAC,CAAC;IACb,CAAC,MAAM;MACLJ,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;IAChB;EACF,CAAC,EAAE,CAACC,IAAI,EAAEE,IAAI,CAAC,CAAC;EAEhB,oBACEP,OAAA;IAAA0B,QAAA,EAEGvB,KAAK,CAACwB,GAAG,CAACC,IAAI,iBACb5B,OAAA;MAAA0B,QAAA,EAAoBE,IAAI,CAACvB;IAAI,GAAnBuB,IAAI,CAACC,EAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAkB,CACpC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAAC/B,EAAA,CA5CQD,GAAG;EAAA,QAGOH,OAAO;AAAA;AAAAoC,EAAA,GAHjBjC,GAAG;AA8CZ,eAAeA,GAAG;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}