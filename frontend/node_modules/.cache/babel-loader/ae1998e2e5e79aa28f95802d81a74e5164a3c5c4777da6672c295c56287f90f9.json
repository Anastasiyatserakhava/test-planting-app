{"ast":null,"code":"export function normalizeName(name) {\n  // Remove extra spaces and convert to lowercase\n  name = name.replace(/\\s+/g, ' ') // Replace multiple spaces with a single space\n  .trim() // Trim leading and trailing spaces\n  .toLowerCase(); // Convert to lowercase\n\n  // Extract the year (e.g., \"Class of 2026\", \"(Class of 2026)\", \"- Class of 2026\")\n  const yearMatch = name.match(/(?:class of |\\(class of |- class of )(\\d{4})\\)?/);\n  const year = yearMatch ? yearMatch[1] : null;\n\n  // Remove the year part from the name\n  name = name.replace(/(?:class of |\\(class of |- class of )\\d{4}\\)?/g, '').trim();\n\n  // Handle names with commas (e.g., \"Tserakhava, Anastasiya\")\n  if (name.includes(',')) {\n    const [lastName, firstName] = name.split(',').map(part => part.trim());\n    name = `${firstName} ${lastName}`;\n  } else {\n    // Handle names without commas (e.g., \"Anastasiya Tserakhava\")\n    const parts = name.split(' ');\n    if (parts.length >= 2) {\n      const lastName = parts[0]; // First part is the last name\n      const firstName = parts.slice(1).join(' '); // Rest is the first name\n      name = `${firstName} ${lastName}`;\n    }\n  }\n\n  // Add the year back to the name\n  if (year) {\n    name = `${name} class of ${year}`;\n  }\n  return name;\n}\nexport function formatNameForDisplay(name) {\n  return name.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\n}","map":{"version":3,"names":["normalizeName","name","replace","trim","toLowerCase","yearMatch","match","year","includes","lastName","firstName","split","map","part","parts","length","slice","join","formatNameForDisplay","word","charAt","toUpperCase"],"sources":["C:/Users/Анастасия/test-app/frontend/src/utils/normalizeName.js"],"sourcesContent":["export function normalizeName(name) {\r\n    // Remove extra spaces and convert to lowercase\r\n    name = name\r\n        .replace(/\\s+/g, ' ') // Replace multiple spaces with a single space\r\n        .trim()               // Trim leading and trailing spaces\r\n        .toLowerCase();       // Convert to lowercase\r\n\r\n    // Extract the year (e.g., \"Class of 2026\", \"(Class of 2026)\", \"- Class of 2026\")\r\n    const yearMatch = name.match(/(?:class of |\\(class of |- class of )(\\d{4})\\)?/);\r\n    const year = yearMatch ? yearMatch[1] : null;\r\n\r\n    // Remove the year part from the name\r\n    name = name.replace(/(?:class of |\\(class of |- class of )\\d{4}\\)?/g, '').trim();\r\n\r\n    // Handle names with commas (e.g., \"Tserakhava, Anastasiya\")\r\n    if (name.includes(',')) {\r\n        const [lastName, firstName] = name.split(',').map(part => part.trim());\r\n        name = `${firstName} ${lastName}`;\r\n    } else {\r\n        // Handle names without commas (e.g., \"Anastasiya Tserakhava\")\r\n        const parts = name.split(' ');\r\n        if (parts.length >= 2) {\r\n            const lastName = parts[0]; // First part is the last name\r\n            const firstName = parts.slice(1).join(' '); // Rest is the first name\r\n            name = `${firstName} ${lastName}`;\r\n        }\r\n    }\r\n\r\n    // Add the year back to the name\r\n    if (year) {\r\n        name = `${name} class of ${year}`;\r\n    }\r\n\r\n    return name;\r\n}\r\n\r\nexport function formatNameForDisplay(name) {\r\n    return name\r\n        .split(' ')\r\n        .map(word => word.charAt(0).toUpperCase() + word.slice(1))\r\n        .join(' ');\r\n}"],"mappings":"AAAA,OAAO,SAASA,aAAaA,CAACC,IAAI,EAAE;EAChC;EACAA,IAAI,GAAGA,IAAI,CACNC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;EAAA,CACrBC,IAAI,CAAC,CAAC,CAAe;EAAA,CACrBC,WAAW,CAAC,CAAC,CAAC,CAAO;;EAE1B;EACA,MAAMC,SAAS,GAAGJ,IAAI,CAACK,KAAK,CAAC,iDAAiD,CAAC;EAC/E,MAAMC,IAAI,GAAGF,SAAS,GAAGA,SAAS,CAAC,CAAC,CAAC,GAAG,IAAI;;EAE5C;EACAJ,IAAI,GAAGA,IAAI,CAACC,OAAO,CAAC,gDAAgD,EAAE,EAAE,CAAC,CAACC,IAAI,CAAC,CAAC;;EAEhF;EACA,IAAIF,IAAI,CAACO,QAAQ,CAAC,GAAG,CAAC,EAAE;IACpB,MAAM,CAACC,QAAQ,EAAEC,SAAS,CAAC,GAAGT,IAAI,CAACU,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACV,IAAI,CAAC,CAAC,CAAC;IACtEF,IAAI,GAAG,GAAGS,SAAS,IAAID,QAAQ,EAAE;EACrC,CAAC,MAAM;IACH;IACA,MAAMK,KAAK,GAAGb,IAAI,CAACU,KAAK,CAAC,GAAG,CAAC;IAC7B,IAAIG,KAAK,CAACC,MAAM,IAAI,CAAC,EAAE;MACnB,MAAMN,QAAQ,GAAGK,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;MAC3B,MAAMJ,SAAS,GAAGI,KAAK,CAACE,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;MAC5ChB,IAAI,GAAG,GAAGS,SAAS,IAAID,QAAQ,EAAE;IACrC;EACJ;;EAEA;EACA,IAAIF,IAAI,EAAE;IACNN,IAAI,GAAG,GAAGA,IAAI,aAAaM,IAAI,EAAE;EACrC;EAEA,OAAON,IAAI;AACf;AAEA,OAAO,SAASiB,oBAAoBA,CAACjB,IAAI,EAAE;EACvC,OAAOA,IAAI,CACNU,KAAK,CAAC,GAAG,CAAC,CACVC,GAAG,CAACO,IAAI,IAAIA,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAGF,IAAI,CAACH,KAAK,CAAC,CAAC,CAAC,CAAC,CACzDC,IAAI,CAAC,GAAG,CAAC;AAClB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}