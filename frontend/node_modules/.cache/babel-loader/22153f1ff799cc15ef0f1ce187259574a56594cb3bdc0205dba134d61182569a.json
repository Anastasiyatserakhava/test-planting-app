{"ast":null,"code":"export function normalizeName(name) {\n  // Remove punctuation, extra spaces, and convert to lowercase\n  name = name.replace(/[^\\w\\s]/g, '') // Remove punctuation\n  .replace(/\\s+/g, ' ') // Replace multiple spaces with a single space\n  .trim() // Trim leading and trailing spaces\n  .toLowerCase(); // Convert to lowercase\n\n  // Extract the \"Class of\" year\n  const classOfMatch = name.match(/\\bclass of (\\d{4})\\b/);\n  const classOfYear = classOfMatch ? classOfMatch[1] : null;\n\n  // Remove the \"Class of\" part from the name\n  name = name.replace(/\\bclass of \\d{4}\\b/g, '').trim();\n\n  // Split the name into parts\n  const parts = name.split(' ');\n\n  // Reorder the name to \"FirstName LastName\" format\n  if (parts.length >= 2) {\n    // If the name contains a comma (e.g., \"Tserakhava, Anastasiya\"), reorder it\n    if (name.includes(',')) {\n      const [lastName, firstName] = name.split(',').map(part => part.trim());\n      name = `${firstName} ${lastName}`;\n    } else {\n      // If no comma, assume the first part is the last name (e.g., \"Tserakhava Anastasiya\")\n      const lastName = parts[0];\n      const firstName = parts.slice(1).join(' ');\n      name = `${firstName} ${lastName}`;\n    }\n  }\n\n  // Add the \"Class of\" year back to the name\n  if (classOfYear) {\n    name = `${name} class of ${classOfYear}`;\n  }\n  return name;\n}\nexport function formatNameForDisplay(name) {\n  return name.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\n}","map":{"version":3,"names":["normalizeName","name","replace","trim","toLowerCase","classOfMatch","match","classOfYear","parts","split","length","includes","lastName","firstName","map","part","slice","join","formatNameForDisplay","word","charAt","toUpperCase"],"sources":["C:/Users/Анастасия/test-app/frontend/src/utils/normalizeName.js"],"sourcesContent":["export function normalizeName(name) {\r\n    // Remove punctuation, extra spaces, and convert to lowercase\r\n    name = name\r\n        .replace(/[^\\w\\s]/g, '') // Remove punctuation\r\n        .replace(/\\s+/g, ' ')    // Replace multiple spaces with a single space\r\n        .trim()                  // Trim leading and trailing spaces\r\n        .toLowerCase();          // Convert to lowercase\r\n\r\n    // Extract the \"Class of\" year\r\n    const classOfMatch = name.match(/\\bclass of (\\d{4})\\b/);\r\n    const classOfYear = classOfMatch ? classOfMatch[1] : null;\r\n\r\n    // Remove the \"Class of\" part from the name\r\n    name = name.replace(/\\bclass of \\d{4}\\b/g, '').trim();\r\n\r\n    // Split the name into parts\r\n    const parts = name.split(' ');\r\n\r\n    // Reorder the name to \"FirstName LastName\" format\r\n    if (parts.length >= 2) {\r\n        // If the name contains a comma (e.g., \"Tserakhava, Anastasiya\"), reorder it\r\n        if (name.includes(',')) {\r\n            const [lastName, firstName] = name.split(',').map(part => part.trim());\r\n            name = `${firstName} ${lastName}`;\r\n        } else {\r\n            // If no comma, assume the first part is the last name (e.g., \"Tserakhava Anastasiya\")\r\n            const lastName = parts[0];\r\n            const firstName = parts.slice(1).join(' ');\r\n            name = `${firstName} ${lastName}`;\r\n        }\r\n    }\r\n\r\n    // Add the \"Class of\" year back to the name\r\n    if (classOfYear) {\r\n        name = `${name} class of ${classOfYear}`;\r\n    }\r\n\r\n    return name;\r\n}\r\n\r\nexport function formatNameForDisplay(name) {\r\n    return name\r\n        .split(' ')\r\n        .map(word => word.charAt(0).toUpperCase() + word.slice(1))\r\n        .join(' ');\r\n}"],"mappings":"AAAA,OAAO,SAASA,aAAaA,CAACC,IAAI,EAAE;EAChC;EACAA,IAAI,GAAGA,IAAI,CACNC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;EAAA,CACxBA,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAAI;EAAA,CACxBC,IAAI,CAAC,CAAC,CAAkB;EAAA,CACxBC,WAAW,CAAC,CAAC,CAAC,CAAU;;EAE7B;EACA,MAAMC,YAAY,GAAGJ,IAAI,CAACK,KAAK,CAAC,sBAAsB,CAAC;EACvD,MAAMC,WAAW,GAAGF,YAAY,GAAGA,YAAY,CAAC,CAAC,CAAC,GAAG,IAAI;;EAEzD;EACAJ,IAAI,GAAGA,IAAI,CAACC,OAAO,CAAC,qBAAqB,EAAE,EAAE,CAAC,CAACC,IAAI,CAAC,CAAC;;EAErD;EACA,MAAMK,KAAK,GAAGP,IAAI,CAACQ,KAAK,CAAC,GAAG,CAAC;;EAE7B;EACA,IAAID,KAAK,CAACE,MAAM,IAAI,CAAC,EAAE;IACnB;IACA,IAAIT,IAAI,CAACU,QAAQ,CAAC,GAAG,CAAC,EAAE;MACpB,MAAM,CAACC,QAAQ,EAAEC,SAAS,CAAC,GAAGZ,IAAI,CAACQ,KAAK,CAAC,GAAG,CAAC,CAACK,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACZ,IAAI,CAAC,CAAC,CAAC;MACtEF,IAAI,GAAG,GAAGY,SAAS,IAAID,QAAQ,EAAE;IACrC,CAAC,MAAM;MACH;MACA,MAAMA,QAAQ,GAAGJ,KAAK,CAAC,CAAC,CAAC;MACzB,MAAMK,SAAS,GAAGL,KAAK,CAACQ,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;MAC1ChB,IAAI,GAAG,GAAGY,SAAS,IAAID,QAAQ,EAAE;IACrC;EACJ;;EAEA;EACA,IAAIL,WAAW,EAAE;IACbN,IAAI,GAAG,GAAGA,IAAI,aAAaM,WAAW,EAAE;EAC5C;EAEA,OAAON,IAAI;AACf;AAEA,OAAO,SAASiB,oBAAoBA,CAACjB,IAAI,EAAE;EACvC,OAAOA,IAAI,CACNQ,KAAK,CAAC,GAAG,CAAC,CACVK,GAAG,CAACK,IAAI,IAAIA,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAGF,IAAI,CAACH,KAAK,CAAC,CAAC,CAAC,CAAC,CACzDC,IAAI,CAAC,GAAG,CAAC;AAClB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}